{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ETS_CookBook This is the documentation the ETS CookBook, which is a collection of useful Python scripts used across ETS (a research group within TNO) models. The documentation for each script/function can be found by clicking on the navigation bar on the left (they are arranged by theme). Authors and contact Omar Usmani Omar.Usmani@TNO.nl Installation and use You can either copy the ETS_CookBook.py file (in src/ETS_CookBook) to your project and import it, or (preferably) install it via PyPi: pip install ETS_CookBook You also need to ensure that all the required libraries are installed. Their list in given in requirements.txt. You can do this with the following command: pip install -r requirements.txt To use the CookBook, import it as such: from ETS_CookBook import ETS_CookBook as cook Then you can call your functions as such: cook.reference_scale([0.26, 0.89]) (You can replace the as cook with something else, or even skip it altogether: if you do skip it, then call the functions with ETS_CookBook.function). License This cookbook is released under the Apache 2.0 . All accompanying documentation and manuals are released under the Creative Commons BY-SA 4.0 license Repository The code repository can be found here The distribution package can be found here Status This CookBook is a working version that will be updated with new functions as they are need in various projects. Functions will be updated as appropriate. You can contact the authors for bug reports, feature suggestions, or any questions you might have. Goals This module was forked from prior work, most notably from ChaProEV . The forking is due to the/desire to use the auxiliary functions developed in these projects in more project needs. Libraries used and licensing (See requirements.txt file for versions (corresponding to Python 3.11.1, which is the version used for developping and testing the model)) pip install -r requirements.txt Acknowledgements This CookBook has been developed within multiple projects, including the following: This project was partly develop under funding from European Climate, Infrastructure and Environment Executive Agency under the European Union\u2019s HORIZON Research and Innovation Actions under grant agreement N\u00b0101095998.","title":"Home"},{"location":"#ets_cookbook","text":"This is the documentation the ETS CookBook, which is a collection of useful Python scripts used across ETS (a research group within TNO) models. The documentation for each script/function can be found by clicking on the navigation bar on the left (they are arranged by theme).","title":"ETS_CookBook"},{"location":"#authors-and-contact","text":"Omar Usmani Omar.Usmani@TNO.nl","title":"Authors and contact"},{"location":"#installation-and-use","text":"You can either copy the ETS_CookBook.py file (in src/ETS_CookBook) to your project and import it, or (preferably) install it via PyPi: pip install ETS_CookBook You also need to ensure that all the required libraries are installed. Their list in given in requirements.txt. You can do this with the following command: pip install -r requirements.txt To use the CookBook, import it as such: from ETS_CookBook import ETS_CookBook as cook Then you can call your functions as such: cook.reference_scale([0.26, 0.89]) (You can replace the as cook with something else, or even skip it altogether: if you do skip it, then call the functions with ETS_CookBook.function).","title":"Installation and use"},{"location":"#license","text":"This cookbook is released under the Apache 2.0 . All accompanying documentation and manuals are released under the Creative Commons BY-SA 4.0 license","title":"License"},{"location":"#repository","text":"The code repository can be found here The distribution package can be found here","title":"Repository"},{"location":"#status","text":"This CookBook is a working version that will be updated with new functions as they are need in various projects. Functions will be updated as appropriate. You can contact the authors for bug reports, feature suggestions, or any questions you might have.","title":"Status"},{"location":"#goals","text":"This module was forked from prior work, most notably from ChaProEV . The forking is due to the/desire to use the auxiliary functions developed in these projects in more project needs.","title":"Goals"},{"location":"#libraries-used-and-licensing","text":"(See requirements.txt file for versions (corresponding to Python 3.11.1, which is the version used for developping and testing the model)) pip install -r requirements.txt","title":"Libraries used and licensing"},{"location":"#acknowledgements","text":"This CookBook has been developed within multiple projects, including the following: This project was partly develop under funding from European Climate, Infrastructure and Environment Executive Agency under the European Union\u2019s HORIZON Research and Innovation Actions under grant agreement N\u00b0101095998.","title":"Acknowledgements"},{"location":"make_spider_chart/","text":"Make spider chart What it does This draws a spider/radar chart on a matplotlib plot/PolarAxes object. Inputs spider_plot This is the plot on which the chart will be drawn. It needs to be a PolarAxes (matplotlib.projections.polar.PolarAxes). series_label This is a label for your series of data, in the form of a string. data_labels This a list of strings labelling each of your data points. data_values This is a list of floats that contains the values of each of your elements (how far from the center of the spider they are). ticks This is a list (of floats) of ticks along the spider (they should at least cover all your data values). tick_labels This is a list of labels corresponding to the ticks above. The list needs to be of the same length as the one above, with each element corresponding to the one in the above list. spider_color A string giveing the color name (see here for a list). spider_marker A string to set the markers for each data point. See here for options. spider_linewidth A float setting the with o the spider line spider_alpha A float (between 0 and 1) setting the opacity of the spider (0=fully transparent, 1=fully opaque) Output This returns a plot (PolarAxes) with the spider chart drawn on it. Use the same plot/PolarAxesas output as you used for input, so that you can superpose spiders. Examples Two spiders series_label = 'SFC' data_values = [0.6, 0, 0.26, 0.42, 0.89, 0.77] data_labels = ['Mango', 'Mapo', 'Lacrosse', 'Floorball', 'Switch', 'NDS'] ticks = [0, 0.25, 0.50, 0.75, 1.0] tick_labels = ['0%', '25%', '50%', '75%', '100%'] spider_color = 'fuchsia' spider_marker = 'o' spider_linewidth = 2 spider_figure = plt.figure() spider_plot = spider_figure.add_subplot(111, polar=True) spider_alpha = 0.26 spider_plot = make_spider_chart( spider_plot, series_label, data_labels, data_values, ticks, tick_labels, spider_color, spider_marker, spider_linewidth, spider_alpha, ) spider_color = 'dodgerblue' series_label = 'GSHC' data_values = [0.52, 0.18, 0.29, 0.39, 0.66, 0.42] spider_plot = make_spider_chart( spider_plot, series_label, data_labels, data_values, ticks, tick_labels, spider_color, spider_marker, spider_linewidth, spider_alpha, ) spider_figure.savefig('docs/spider_example.png') Note that we use spider_plot as both input and output of make_spider_chart. We do this so that we can plot two spiders on top of each other (by calling the function twice). Tests Theta labels This test looks if the function sets the theta labels (around the spider) to the data labels. Typing issues Axes versus PolarAxes You might encounter an issue when running a MyPy (or other) type check. This comes from this line: spider_plot.set_thetagrids(angles * 180 / np.pi, data_labels) This puts the data labels as the theta labels (around the spider) requires spider_plot to be a PolarAxes (matplotlib.projecions.polar.PolarAxes) element because set_thetagrids is an attribute of PolarAxes (and not Axes). The problem is that the functions used to create a plot (an Axes element) claim to only create Axes, even if they create a PolarAxes, such as with the line below: spider_plot = spider_figure.add_subplot(111, polar=True) Matplotlib claims that add_subplot creates an Axes object, but the result is a PolarAxes. This means that a type check (such as MyPy) might throw an error. This might be solved if matplotlib updates its typing documentation by adding the possibility that add_subplot can also create a PolarAxes.","title":"make_spider_chart"},{"location":"make_spider_chart/#make-spider-chart","text":"","title":"Make spider chart"},{"location":"make_spider_chart/#what-it-does","text":"This draws a spider/radar chart on a matplotlib plot/PolarAxes object.","title":"What it does"},{"location":"make_spider_chart/#inputs","text":"","title":"Inputs"},{"location":"make_spider_chart/#spider_plot","text":"This is the plot on which the chart will be drawn. It needs to be a PolarAxes (matplotlib.projections.polar.PolarAxes).","title":"spider_plot"},{"location":"make_spider_chart/#series_label","text":"This is a label for your series of data, in the form of a string.","title":"series_label"},{"location":"make_spider_chart/#data_labels","text":"This a list of strings labelling each of your data points.","title":"data_labels"},{"location":"make_spider_chart/#data_values","text":"This is a list of floats that contains the values of each of your elements (how far from the center of the spider they are).","title":"data_values"},{"location":"make_spider_chart/#ticks","text":"This is a list (of floats) of ticks along the spider (they should at least cover all your data values).","title":"ticks"},{"location":"make_spider_chart/#tick_labels","text":"This is a list of labels corresponding to the ticks above. The list needs to be of the same length as the one above, with each element corresponding to the one in the above list.","title":"tick_labels"},{"location":"make_spider_chart/#spider_color","text":"A string giveing the color name (see here for a list).","title":"spider_color"},{"location":"make_spider_chart/#spider_marker","text":"A string to set the markers for each data point. See here for options.","title":"spider_marker"},{"location":"make_spider_chart/#spider_linewidth","text":"A float setting the with o the spider line","title":"spider_linewidth"},{"location":"make_spider_chart/#spider_alpha","text":"A float (between 0 and 1) setting the opacity of the spider (0=fully transparent, 1=fully opaque)","title":"spider_alpha"},{"location":"make_spider_chart/#output","text":"This returns a plot (PolarAxes) with the spider chart drawn on it. Use the same plot/PolarAxesas output as you used for input, so that you can superpose spiders.","title":"Output"},{"location":"make_spider_chart/#examples","text":"","title":"Examples"},{"location":"make_spider_chart/#two-spiders","text":"series_label = 'SFC' data_values = [0.6, 0, 0.26, 0.42, 0.89, 0.77] data_labels = ['Mango', 'Mapo', 'Lacrosse', 'Floorball', 'Switch', 'NDS'] ticks = [0, 0.25, 0.50, 0.75, 1.0] tick_labels = ['0%', '25%', '50%', '75%', '100%'] spider_color = 'fuchsia' spider_marker = 'o' spider_linewidth = 2 spider_figure = plt.figure() spider_plot = spider_figure.add_subplot(111, polar=True) spider_alpha = 0.26 spider_plot = make_spider_chart( spider_plot, series_label, data_labels, data_values, ticks, tick_labels, spider_color, spider_marker, spider_linewidth, spider_alpha, ) spider_color = 'dodgerblue' series_label = 'GSHC' data_values = [0.52, 0.18, 0.29, 0.39, 0.66, 0.42] spider_plot = make_spider_chart( spider_plot, series_label, data_labels, data_values, ticks, tick_labels, spider_color, spider_marker, spider_linewidth, spider_alpha, ) spider_figure.savefig('docs/spider_example.png') Note that we use spider_plot as both input and output of make_spider_chart. We do this so that we can plot two spiders on top of each other (by calling the function twice).","title":"Two spiders"},{"location":"make_spider_chart/#tests","text":"","title":"Tests"},{"location":"make_spider_chart/#theta-labels","text":"This test looks if the function sets the theta labels (around the spider) to the data labels.","title":"Theta labels"},{"location":"make_spider_chart/#typing-issues","text":"","title":"Typing issues"},{"location":"make_spider_chart/#axes-versus-polaraxes","text":"You might encounter an issue when running a MyPy (or other) type check. This comes from this line: spider_plot.set_thetagrids(angles * 180 / np.pi, data_labels) This puts the data labels as the theta labels (around the spider) requires spider_plot to be a PolarAxes (matplotlib.projecions.polar.PolarAxes) element because set_thetagrids is an attribute of PolarAxes (and not Axes). The problem is that the functions used to create a plot (an Axes element) claim to only create Axes, even if they create a PolarAxes, such as with the line below: spider_plot = spider_figure.add_subplot(111, polar=True) Matplotlib claims that add_subplot creates an Axes object, but the result is a PolarAxes. This means that a type check (such as MyPy) might throw an error. This might be solved if matplotlib updates its typing documentation by adding the possibility that add_subplot can also create a PolarAxes.","title":"Axes versus PolarAxes"}]}